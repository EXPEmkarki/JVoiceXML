// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'distribution'


distributions {
    custom {}
}

repositories {
    mavenCentral()
}

dependencies {
    compile project(':org.jvoicexml.client')
    compile project(':org.jvoicexml.client.text')

    runtime project(':org.jvoicexml.xml')
    runtime project(':org.jvoicexml')
    runtime project(':org.jvoicexml.config')
    runtime project(':org.jvoicexml.jndi')
    runtime project(':org.jvoicexml.srgs')
    runtime project(':org.jvoicexml.mmi.events')
    runtime project(':org.jvoicexml.profile.mmi')
    runtime project(':org.jvoicexml.profile.vxml21')
    runtime project(':org.jvoicexml.interpreter.datamodel.ecmascript')
    runtime project(':org.jvoicexml.interpreter.grammar.halef')
    runtime project(':org.jvoicexml.interpreter.grammar.luis')
    runtime project(':org.jvoicexml.interpreter.grammar.regex')
    runtime project(':org.jvoicexml.implementation.jsapi10')
    runtime project(':org.jvoicexml.implementation.jsapi20')
    runtime project(':org.jvoicexml.implementation.mary')
    runtime project(':org.jvoicexml.implementation.text')
    runtime project(':org.jvoicexml.callmanager.mmi')
    runtime project(':org.jvoicexml.callmanager.mmi.http')
    runtime project(':org.jvoicexml.callmanager.mmi.socket')
    runtime project(':org.jvoicexml.callmanager.mmi.umundo')
    runtime project(':org.jvoicexml.callmanager.sip')
    runtime project(':org.jvoicexml.callmanager.text')
    runtime project(':org.jvoicexml.voicexmlunit')
}

jar {
    onlyIf { 
        false
    }
}

task jvxmlservlet(dependsOn: ':org.jvoicexml.callmanager.mmi.servlet:war') {
    doLast {
        applicationDistribution.into("servlets") {
            from( project(':org.jvoicexml.callmanager.mmi.servlet').war.outputs.files )
        }
    }
}

distZip {
    dependsOn jvxmlservlet
    baseName 'jvoicexml'
}

task jvxmlplugins {
    dependsOn ':org.jvoicexml.jndi:jar'
    dependsOn ':org.jvoicexml.implementation.text:jar'
    
    doLast {
        copy {
            into("${project(':org.jvoicexml').projectDir}/config")
            from( project(':org.jvoicexml.jndi').xslt.getOutputFiles() )
            from( project(':org.jvoicexml.implementation.text').xslt.getOutputFiles() )
        }
    }
}

mainClassName = "org.jvoicexml.startup.Startup"
applicationDefaultJvmArgs = ["-Djvoicexml.config=${project(':org.jvoicexml').projectDir}/config",
                             "-Djava.security.policy=${project(':org.jvoicexml').projectDir}/config/jvoicexml.policy" ]

run {
    dependsOn jvxmlplugins
    classpath += files("${project(':org.jvoicexml').projectDir}/config")
}
