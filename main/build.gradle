apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'distribution'


distributions {
    custom {}
}

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

configurations {
    jvxmlInterpreterDatamodelECMAScript {
        description = "ECMAScript data model"
        extendsFrom compile
    }

    jvxmlInterpreterGrammarLUIS {
        description = "LUIS grammar support"
        extendsFrom compile
    }

    jvxmlInterpreterGrammarRegex {
        description = "Regex grammar support"
        extendsFrom compile
    }

    jvxmlImplementationJSAPI10 {
        description = "support for the JSAPI 1.0 implementation platform"
        extendsFrom compile
    }

    jvxmlImplementationJSAPI20 {
        description = "support for the JSAPI 2.0 implementation platform"
        extendsFrom compile
    }

    jvxmlImplementationJTAPI {
        description = "support for the JTAPI implementation platform"
        extendsFrom compile
    }

    jvxmlImplementationKinect {
        description = "support for the Kinect implementation platform"
        extendsFrom compile
    }

    jvxmlImplementationLightweightBML {
        description = "support for the lightweight BML implementation platform"
        extendsFrom compile
    }

    jvxmlImplementationMarc {
        description = "support for the MARC implementation platform"
        extendsFrom compile
    }

    jvxmlImplementationMary {
        description = "support for the Open Mary implementation platform"
        extendsFrom compile
    }

    jvxmlImplementationMMI {
        description = "support for the W3C MMI architecture"
        extendsFrom compile
    }

    jvxmlImplementationMrcpv2 {
        description = "support for the MRCPv2 implementation platform"
        extendsFrom compile
    }

    jvxmlImplementationText {
        description = "support for the text implementation platform"
        extendsFrom compile
    }
    
    jvxmlVoiceXMLUnit {
        description = "VoiceXML Unit Testing"
        extendsFrom compile
    }
    
    jvxmlJNDI {
        description = "JVoiceXML JNDI support"
        extendsFrom compile
    }
}

dependencies {
    compile project(':org.jvoicexml.client')

    jvxmlImplementationJSAPI10 project(':org.jvoicexml.implementation.jsapi10')

    jvxmlImplementationJSAPI20 project(':org.jvoicexml.implementation.jsapi20')

    jvxmlImplementationJTAPI project(':org.jvoicexml.implementation.jtapi')

    jvxmlImplementationKinect project(':org.jvoicexml.implementation.kinect')

    jvxmlImplementationLightweightBML project(':org.jvoicexml.implementation.lightweightbml')
    jvxmlImplementationLightweightBML project(':org.jvoicexml.talkinghead')

    jvxmlImplementationMarc project(':org.jvoicexml.implementation.marc')

    jvxmlImplementationMary project(':org.jvoicexml.implementation.mary')

    jvxmlImplementationMrcpv2 project(':org.jvoicexml.interpreter.grammar.halef')
    jvxmlImplementationMrcpv2 project(':org.jvoicexml.implementation.mrcpv2')
    jvxmlImplementationMrcpv2 project(':org.jvoicexml.callmanager.sip')

    jvxmlImplementationMMI project(':org.jvoicexml.mmi.events')
    jvxmlImplementationMMI project(':org.jvoicexml.profile.mmi')
    jvxmlImplementationMMI project(':org.jvoicexml.callmanager.mmi')
    jvxmlImplementationMMI project(':org.jvoicexml.callmanager.mmi.http')
    jvxmlImplementationMMI project(':org.jvoicexml.callmanager.mmi.socket')
    jvxmlImplementationMMI project(':org.jvoicexml.callmanager.mmi.umundo')

    jvxmlImplementationText project(':org.jvoicexml.client.text')
    jvxmlImplementationText project(':org.jvoicexml.implementation.text')
    jvxmlImplementationText project(':org.jvoicexml.callmanager.text')

    jvxmlInterpreterDatamodelECMAScript project(':org.jvoicexml.interpreter.datamodel.ecmascript')

    jvxmlInterpreterGrammarLUIS project(':org.jvoicexml.interpreter.grammar.luis')

    jvxmlInterpreterGrammarRegex project(':org.jvoicexml.interpreter.grammar.regex')

    jvxmlJNDI project(':org.jvoicexml.jndi')

    jvxmlVoiceXMLUnit project(':org.jvoicexml.voicexmlunit')
    
    runtime project(':org.jvoicexml.xml')
    runtime project(':org.jvoicexml')
    runtime project(':org.jvoicexml.config')
    runtime project(':org.jvoicexml.srgs')
    runtime project(':org.jvoicexml.profile.vxml21')

    
}

clean {
    dependsOn ':org.jvoicexml:clean'
}


jar {
    onlyIf { 
        false
    }
}

task jvxmlservlet(dependsOn: ':org.jvoicexml.callmanager.mmi.servlet:war') {
    doLast {
        applicationDistribution.into("servlets") {
            from(project(':org.jvoicexml.callmanager.mmi.servlet').war.outputs.files)
        }
    }
}

distributions {
    main {
        baseName 'jvoicexml'
        
        contents {
            into('config') { 
                from("${project(':org.jvoicexml').buildDir}/config") 
            }
        }
    }
}

mainClassName = "org.jvoicexml.startup.Startup"
applicationDefaultJvmArgs = ["-Djvoicexml.config=${project(':org.jvoicexml').buildDir}/config",
                             "-Djava.security.policy=${project(':org.jvoicexml').buildDir}/config/jvoicexml.policy",
                             "-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager",
                             "-Dorg.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.Slf4jLog" ]

run {
    dependsOn configurations.jvxmlInterpreterDatamodelECMAScript

    dependsOn configurations.jvxmlImplementationText
    dependsOn configurations.jvxmlImplementationMrcpv2   
    dependsOn configurations.jvxmlInterpreterGrammarLUIS
    
    classpath += files("${project(':org.jvoicexml').buildDir}/config")
}

task(runDebug, dependsOn: 'jar', type: JavaExec) {
    main = "org.jvoicexml.startup.Startup"
    classpath = sourceSets.main.runtimeClasspath + files("${project(':org.jvoicexml').buildDir}/config")
    jvmArgs = ["-Djvoicexml.config=${project(':org.jvoicexml').buildDir}/config",
               "-Djava.security.policy=${project(':org.jvoicexml').buildDir}/config/jvoicexml.policy",
               "-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager",
               "-Dorg.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.Slf4jLog",
               "-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,address=12367" ]
}

task(shutdown, dependsOn: 'jar', type: JavaExec) {
    main = "org.jvoicexml.startup.Shutdown"
    classpath = sourceSets.main.runtimeClasspath + files("${project(':org.jvoicexml').buildDir}/config")
    jvmArgs = ["-Djvoicexml.config=${project(':org.jvoicexml').buildDir}/config",
                             "-Djava.security.policy=${project(':org.jvoicexml').buildDir}/config/jvoicexml.policy",
                             "-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager",
                             "-Dorg.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.Slf4jLog" ]
}
