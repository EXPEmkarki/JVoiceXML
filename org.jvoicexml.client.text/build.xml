<project name="org.jvoicexml.client.text" default="jar" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">
    <description>
This file builds the text client for the text implemenation platform for JVoiceXml.

To override the current settings follow the instructions given in
org.jvoicexml/personal-props/README.txt
  </description>

    <!-- allow the user to override setting in an own propertiesfile. -->
    <property file="../org.jvoicexml/personal-props/ant.properties" />
    <property file="../org.jvoicexml/config-props/ant.properties" />

    <!-- Load the settings for 3rdparty libraries -->
    <import file="3rdparty-libs.xml" />

    <target name="-setup" depends="-local-3rdparty-setup">
        <!-- The component built here-->
        <property name="component" value="org.jvoicexml.client.text" />
        <property name="component.path" value="org/jvoicexml/client/text" />

        <!-- directory structure -->
        <property name="src" value="${basedir}/src/main/java" />
        <property name="src.protobuf" value="${basedir}/src/main/protobuf" />
        <property name="build" value="${basedir}/classes" />
        <property name="dist" value="${jvxml.core.dir}/dist" />
        <property name="apidoc.basedir" value="${jvxml.core.dir}/doc/api/" />
        <property name="apidoc" value="${apidoc.basedir}/${component}" />
        <property name="config" value="${jvxml.core.dir}/config" />
        <property name="resources" value="${basedir}/src/main/resources" />
        <property name="gen" value="${basedir}/build/generated/source/proto/main/java" />

        <condition property="windows">
            <os family="windows" />
        </condition>

        <!-- main jar files -->
        <property name="dist.jar" value="${dist}/${component}.jar" />

        <!-- the class path for 3rdparty libraries -->
        <path id="project.classpath">
            <path refid="jvxml.core.lib" />
            <fileset refid="log4j.lib" />
            <fileset refid="protobuf.lib" />
        </path>
    </target>

    <target name="-checkProtoc">
        <!-- Check if protoc is configured. -->
        <condition property="protoc.available">
            <available file="${mmi.protoc}" />
        </condition>

        <fail unless="protoc.available">
Please specify the mmi.protoc property in your copy of ant.properties
Currently it is set to '${mmi.protoc}'
      </fail>
    </target>


    <target name="-init" depends="-setup">
        <!-- Create build directories -->
        <mkdir dir="${build}" />
        <mkdir dir="${dist}" />
        <mkdir dir="${gen}" />
    </target>

    <target name="clean" depends="-setup" description="Remove all compiled and distribution files">
        <delete dir="${build}" failonerror="false" />
        <delete file="${dist.jar}" failonerror="false" />
        <delete dir="${gen}" failonerror="false" />
    </target>

    <target name="configuration" depends="-setup">
    </target>

    <target name="-up2date">
        <uptodate property="schemasChanged">
            <srcfiles dir="${basedir}">
                <include name="build.xml" />
                <include name="${src.protobuf}/*.proto" />
            </srcfiles>
            <mapper type="merge" to="${gen}/__gen__" />
        </uptodate>
    </target>

    <target name="preprocess" depends="-init,-up2date,-checkProtoc" unless="schemasChanged">
        <copy todir="${gen}">
            <fileset dir="${src.protobuf}">
                <include name="*.proto" />
            </fileset>
        </copy>
        <exec executable="${mmi.protoc}" failonerror="true">
            <arg value="--java_out=${gen}" />
            <arg value="--proto_path=${src.protobuf}" />
            <arg value="${src.protobuf}/TextMessage.proto" />
        </exec>
        <touch file="${gen}/__gen__" />
    </target>

    
    <target name="compile" depends="-init,-checkJavaVersion,preprocess" description="Compile the sources">
        <echo message="compiling ${component} with debug=${javac.debug}, optimize=${javac.optimize}" />
        <javac destdir="${build}" includeantruntime="false" optimize="${javac.optimize}" debug="${javac.debug}" deprecation="on">
            <src path="${src}" />
            <src path="${gen}" />
            <include name="${component.path}/**/*.java" />
            <classpath refid="project.classpath" />
            <compilerarg value="-Xlint:unchecked" />
        </javac>
    </target>

    <target name="jar" depends="compile" description="Pack all compiled files into jar files">
        <!-- text implementation jar file -->
        <jar jarfile="${dist.jar}" compress="false">
            <fileset dir="${build}">
                <include name="${component.path}/**/*.class" />
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <section name="common">
                    <attribute name="Implementation-Vendor" value="JVoiceXML group" />
                    <attribute name="Implementation-Title" value="JVoiceXML client files for text based access" />
                    <attribute name="Implementation-Version" value="${version}" />
                </section>
            </manifest>
            <metainf dir="${resources}">
                <include name="services/*" />
            </metainf>
        </jar>
    </target>

    <target name="rebuild" description="Rebuild the jars from scratch" depends="clean,jar" />

    <target name="apidoc" description="create javadoc" depends="-setup">
        <echo message="creating javadoc for ${component} with access: ${javadoc.access}" />
        <delete dir="${apidoc}" failonerror="false" />
        <javadoc destdir="${apidoc}" windowtitle="JVoiceXML Text Client Library" author="true" version="true" access="${javadoc.access}" use="true">
            <packageset dir="${src}" />
            <packageset dir="${gen}" />
            <classpath refid="project.classpath" />

            <doctitle>JVoiceXML - a free VoiceXML interpreter</doctitle>
            <bottom>Copyright &#169; 2005-${year} JVoiceXML group</bottom>
            <tag name="todo" description="Stuff to complete" />

            <!-- Resolve used libraries -->
            <link offline="true" href="${apidoc.java.href}" packagelistLoc="${3rdparty.dir}" />
            <link offline="true" resolveLink="false" href="${apidoc.jvxml.href}" packagelistLoc="${apidoc.basedir}/org.jvoicexml" />
            <link offline="true" href="${log4j.apidoc.href}" packagelistLoc="${log4j.dir}" />

            <!-- Group definitions -->
            <group title="Text Client Library">
                <package name="${component}*" />
            </group>
        </javadoc>
    </target>

    <target name="checkstyle" description="Check for JVoiceXML coding standard" depends="compile, -initcheckstyle" if="checkstyle.present">
        <property name="checkstyle-target.dir" value="${dist}/checkstyle/${component}" />
        <mkdir dir="${checkstyle-target.dir}" />
        <property name="checkstyle.data" value="${checkstyle-target.dir}/checkstyle-data.xml" />
        <checkstyle config="${jvxml.core.dir}/etc/jvoicexml-checks.xml" failonviolation="false">
            <classpath>
                <pathelement path="${project.classpath}" />
                <pathelement location="${build}" />
            </classpath>
            <classpath refid="jvxml.core.lib" />
            <fileset dir="${src}">
                <include name="org/jvoicexml/**/*.java" />
            </fileset>
            <formatter type="xml" tofile="${checkstyle.data}" />
        </checkstyle>
        <xslt style="${jvxml.core.dir}/etc/checkstyle-frames.xsl" in="${checkstyle.data}" out="${checkstyle-target.dir}/report.html">
            <param name="output.dir" expression="${checkstyle-target.dir}" />
        </xslt>
    </target>

    <target name="distribution" depends="jar">
        <property name="distFolder" value="${dist}/${jvxml.version}" />
        <copy todir="${distFolder}/lib" file="${dist.jar}" />
        <copy todir="${jvxml.core.dir}/doc" file="${src.protobuf}/TextMessage.proto"/>
    </target>

    <target name="dist-maven-snapshot" depends="distribution">
        <copy todir="${dist}" file="etc/${component}.pom" overwrite="true" />
        <replace file="${dist}/${component}.pom" token="@version@" value="${jvxml.version}-SNAPSHOT" />
        <path id="maven.path">
            <fileset dir="${3rdparty.dir}/maven/lib">
                <include name="maven-ant-tasks-2.1.3.jar" />
            </fileset>
        </path>
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="maven.path" />
        <artifact:mvn>
            <arg value="org.apache.maven.plugins:maven-deploy-plugin:2.6:deploy-file" />
            <arg value="-Durl=https://oss.sonatype.org/content/repositories/snapshots" />
            <arg value="-DrepositoryId=sonatype-nexus-snapshots" />
            <arg value="-DpomFile=${dist}/${component}.pom" />
            <arg value="-Dfile=${dist}/${component}.jar" />
        </artifact:mvn>
    </target>
</project>
